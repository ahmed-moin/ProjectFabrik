<%args>
$projektid
$dbh
$projektplan
</%args>
<%once>

  sub datumstage
  {
    my $d = new Contavia::Date(shift);
    return $d && ! $d->is_null && $d->tag + $d->monat * 30 + $d->jahr * 360;
  }

</%once>
<%init>
  use Contavia qw(fehler);
  use Contavia::Date;

  # ermittele Gesamtlaufzeit des Projektes
  my ($projektstart, $projektende) = $dbh->selectrow_array( "
    select min(apl_startdatum), max(apl_endedatum)
      from aufgabenplan
     where apl_pid = $projektid
       and apl_ppl = $projektplan" );

  fehler "Zeitplan nicht vorhanden ($projektid, $projektplan)"
    unless $projektstart && $projektende;

  my $tae_start = $dbh->selectrow_array( "
    select min(tae_datum)
      from taetigkeit
       join auftrag
         on atr_nummer = tae_auftrag
     where atr_pid = $projektid" );

  $projektstart = new Contavia::Date($projektstart);
  $projektende  = new Contavia::Date($projektende);

  if ($tae_start)
  {
    $tae_start = new Contavia::Date($tae_start);
    if ($projektstart->cmp($tae_start) > 0)
    {
      $projektstart = $tae_start
    }
  }

  my $projektstarttage = datumstage($projektstart);

  #
  # ermittele Teilprojekte zu dem Projektplan
  #
  my $tprs = $dbh->selectall_arrayref( "
    select taid, titel,
           apl_startdatum, apl_endedatum
      from vteilprojekt
       left outer join aufgabenplan
         on apl_pid = pid
        and apl_tid = tid
        and apl_ppl = ppl
        and apl_startdatum is not null
        and apl_endedatum is not null
     where pid = $projektid
       and ppl = $projektplan
     order by 1, 3, 4" );

  $m->comp('.aggregiere', tprs => $tprs);

</%init>

<h1><i18n>Projektzeitplan</i18n></h1>

<table cellpadding='0' cellspacing='0'>
 <tr>
  <td>
  </td>

  <td>
   <& '/dateline', start => [$projektstart->monat, $projektstart->jahr],
                   end   => [$projektende->monat, $projektende->jahr],
                   width => 30 &>
  </td>
 </tr>

 <%perl>

 my $taid_akt = '';
 my $datum = $projektstarttage;
 foreach (@$tprs)
 {
   my ($taid, $titel, undef, undef, $starttage, $endetage) = @$_;

   if ($taid ne $taid_akt)
   {
     $taid_akt = $taid;

     if ($taid_akt)
     {
       </%perl>
  </td>
 </tr>

 <tr>
  <td>
  </td>
  <td background='/images/tdbg.png'>
   &nbsp;
  </td>
 </tr>
       <%perl>
       $datum = $projektstarttage;
     }

 </%perl>
 <tr>
  <td>
   <%$titel%>
  </td>

  <td background='/images/tdbg.png'>
 <%perl>

     # Wenn wir ein Teilprojekt ohne Start- und Endedatum finden,
     # dann brauchen wir nur eine leere Zeile
     next unless $starttage && $endetage;
   }

   #my ($ist_start, $ist_ende, $ist_ende2) = @{$ist{$taid}} if ($ist{$taid});
   #my $ist_starttage = datumstage(new Contavia::Date($ist_start)) if $ist_start;
   #my $ist_endetage  = datumstage(new Contavia::Date($ist_ende))  if $ist_ende;
   #my $ist_endetage2 = datumstage(new Contavia::Date($ist_ende2)) if $ist_ende2;
   #$ist_endetage = $ist_endetage2 if $ist_endetage2 > $ist_endetage;
   
   $m->comp('/zeitbar', width  => $starttage - $datum,
                        height => 1,
                        color  => [255, 255, 255]);

   $m->comp('/zeitbar', width  => $endetage - $starttage,
                        height => 14,
                        color  => [0, 0, 128] );

   $datum = $endetage;
  } # foreach (@$tprs)
   </%perl>
  </td>
 </tr>
</table>

<hr>

<h2>Legende:</h2>
<table>
 <tr>
  <td>
	<i18n>
   Plan
	</i18n>
  </td>
  <td>
   <& '/bar', width => 24, height => 14, color => [0, 0, 128] &>
  </td>
 </tr>

 <tr>
  <td>
	<i18n>
   Ist
	</i18n>
  </td>
  <td align='center'>
   <& '/bar', width => 24, height => 14, color => [128, 128, 192] &>
  </td>
 </tr>

 <tr>
  <td>
	<i18n>
   Milestone erledigt
	</i18n>
  </td>
  <td align='center'>
   <& '/zeitbar', width => 14,
                  height => 14,
                  color => 'ffffff',
                  milestone => [ [ 7, '0f0' ] ] &>
  </td>
 </tr>

 <tr>
  <td>
	<i18n>
   Milestone nicht erledigt
	</i18n>
  </td>
  <td align='center'>
   <& '/zeitbar', width => 14,
                  height => 14,
                  color => 'ffffff',
                  milestone => [ [ 7, 'ff0' ] ] &>
  </td>
 </tr>

 <tr>
  <td>
	<i18n>
   Milestone überschritten
	</i18n>
  </td>
  <td align='center'>
   <& '/zeitbar', width => 14,
                  height => 14,
                  color => 'ffffff',
                  milestone => [ [ 7, 'f00' ] ] &>
  </td>
 </tr>

 <tr>
  <td>
	<i18n>
   Bombe erledigt
	</i18n>
  </td>
  <td align='center'>
   <& '/zeitbar', width => 14,
                  height => 14,
                  color => 'ffffff',
                  bomb => [ [ 7, '0f0' ] ] &>
  </td>
 </tr>

 <tr>
  <td>
	<i18n>
   Bombe nicht erledigt
	</i18n>
  </td>
  <td align='center'>
   <& '/zeitbar', width => 14,
                  height => 14,
                  color => 'ffffff',
                  bomb => [ [ 7, 'ff0' ] ] &>
  </td>
 </tr>

 <tr>
  <td>
	<i18n>
   Bombe überschritten
	</i18n>
  </td>
  <td align='center'>
   <& '/zeitbar', width => 14,
                  height => 14,
                  color => 'ffffff',
                  bomb => [ [ 7, 'f00' ] ] &>
  </td>
 </tr>

</table>

<%def .dumptprs>
<%args>
@tprs
</%args>
<table border='1'>

% foreach (@tprs) {
 <tr>
%   foreach my $d (@$_) {
  <td>
   <%$d%>
  </td>
%   }
 </tr>
% }
</table>

</%def>

<%def .aggregiere>
<%args>
$tprs
</%args>
<%perl>
  #
  # rechne Start- und Endedatum in Tage um
  #
  foreach (@$tprs)
  {
    push @$_, datumstage($_->[2]);
    push @$_, datumstage($_->[3]);
  }

  #
  # kombiniere überschneidende Aufgaben
  #
  for (my $i = 1; $i < @$tprs; ++$i)
  {
    # vergleiche jede Aufgabe mit seinem Vorgänger
    if ($tprs->[$i-1][0] eq $tprs->[$i][0]        # Teilprojekte gleich?
     && $tprs->[$i-1][5] ge $tprs->[$i][4] - 1 )  # Endedatum Vorgänger > Startdatum?
    {
      if ($tprs->[$i-1][5] lt $tprs->[$i][5] )    # Endedatum Vorgänger < Endedatum?
      {
        $tprs->[$i-1][3] = $tprs->[$i][3];
        $tprs->[$i-1][5] = $tprs->[$i][5];
      }
      splice(@$tprs, $i--, 1);
    }
  }

  #
  # ergänze Aufgaben durch das Anfangsdatum des Teilprojektes
  #
  $tprs->[0][6] = $tprs->[0][4];
  for (my $i = 1; $i < @$tprs; ++$i)
  {
    # vergleiche jede Aufgabe mit seinem Vorgänger?
    if ($tprs->[$i-1][0] eq $tprs->[$i][0])    # Teilprojekte gleich?
    {
      # Anfangsdatum des Teilprojektes vom Vorgänger übernehmen
      $tprs->[$i][6] = $tprs->[$i-1][6];
    }
    else
    {
      # das ist die erste Aufgabe des Teilprojektes,
      # also ist das Anfangsdatum des Teilprojektes das Anfangsdatum dieser ersten Aufgabe
      $tprs->[$i][6] = $tprs->[$i][4];
    }
  }

  # Sortiere nach Endedatum
  @$tprs = sort { $a->[0] cmp $b->[0] ||        # Teilprojektnummer
                  $a->[5] <=> $b->[5] ||        # Endedatum der Aufgabe
                  $a->[4] <=> $b->[4] } @$tprs; # Anfangsdatum der Aufgabe

  #
  # ergänze Aufgaben durch das Endedatum des Teilprojektes
  #
  $tprs->[-1][7] = $tprs->[-1][5];        # letzte Aufgabe ist die letzte
                                          #   Aufgabe des letzten Teilprojektes
  for (my $i = @$tprs - 1; $i > 0; --$i)  # jetzt rückwärts durch die Teilprojekte
  {
    # vergleiche jede Aufgabe mit seinem Vorgänger
    if ($tprs->[$i-1][0] eq $tprs->[$i][0])    # Teilprojekte gleich?
    {
      # Endedatum des Teilprojektes auf den Vorgänger übertragen
      $tprs->[$i-1][7] = $tprs->[$i][7];
    }
    else
    {
      # das ist die letzte Aufgabe des Teilprojektes
      $tprs->[$i-1][7] = $tprs->[$i-1][5];
    }
  }

  # Sortiere nach Anfangsdatum
  @$tprs = sort { $a->[6] <=> $b->[6] ||        # Anfangsdatum des Teilprojektes
                  $a->[7] <=> $b->[7] ||        # Endedatum des Teilprojektes
                  $a->[4] <=> $b->[4] ||        # Anfangsdatum der Aufgabe
                  $a->[5] <=> $b->[5] } @$tprs; # Endedatum der Aufgabe

</%perl>
</%def>
